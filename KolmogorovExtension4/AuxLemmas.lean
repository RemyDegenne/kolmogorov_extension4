/-
Copyright (c) 2023 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, Peter Pfaffelhuber
-/
import Mathlib.Analysis.SpecificLimits.Basic
import Mathlib.MeasureTheory.MeasurableSpace.Defs

open Finset Set Filter

open scoped ENNReal NNReal Topology

-- PR #15294
lemma Finset.sUnion_disjiUnion {Œ± Œ≤ : Type*} {f : Œ± ‚Üí Finset (Set Œ≤)} (I : Finset Œ±)
    (hf : (I : Set Œ±).PairwiseDisjoint f) :
    ‚ãÉ‚ÇÄ (I.disjiUnion f hf : Set (Set Œ≤)) = ‚ãÉ a ‚àà I, ‚ãÉ‚ÇÄ ‚Üë(f a) := by
  ext
  simp only [coe_disjiUnion, mem_coe, Set.mem_sUnion, Set.mem_iUnion, exists_prop]
  tauto

lemma Finset.sum_image_le_of_nonneg {Œπ Œ± Œ≤ : Type*} [DecidableEq Œ±]
    [OrderedAddCommMonoid Œ≤] [SMulPosMono ‚Ñï Œ≤]
    {J : Finset Œπ} {g : Œπ ‚Üí Œ±} {f : Œ± ‚Üí Œ≤} (hf : ‚àÄ u ‚àà J.image g, 0 ‚â§ f u) :
    ‚àë u in J.image g, f u ‚â§ ‚àë u in J, f (g u) := by
  rw [sum_comp f g]
  refine sum_le_sum fun a hag ‚Ü¶ ?_
  obtain ‚ü®i, hi, hig‚ü© := Finset.mem_image.mp hag
  conv_lhs => rw [‚Üê one_nsmul (f a)]
  refine smul_le_smul_of_nonneg_right ?_ (hf a hag)
  rw [Nat.one_le_iff_ne_zero, ‚Üê Nat.pos_iff_ne_zero, card_pos]
  exact ‚ü®i, mem_filter.mpr ‚ü®hi, hig‚ü©‚ü©

-- PR #15294
@[to_additive]
lemma Finset.prod_image_of_disjoint {Œ± Œ≤ : Type*} [PartialOrder Œ±] [OrderBot Œ±] [DecidableEq Œ±]
    [CommMonoid Œ≤] {g : Œ± ‚Üí Œ≤}
    (hg_bot : g ‚ä• = 1) {f : Œπ ‚Üí Œ±} {I : Finset Œπ} (hf_disj : (I : Set Œπ).PairwiseDisjoint f) :
    ‚àè s in I.image f, g s = ‚àè i in I, g (f i) := by
  rw [prod_image']
  intro n hnI
  by_cases hfn : f n = ‚ä•
  ¬∑ simp only [hfn, hg_bot]
    refine (prod_eq_one fun i hi ‚Ü¶ ?_).symm
    rw [mem_filter] at hi
    rw [hi.2, hg_bot]
  ¬∑ classical
    suffices filter (fun j ‚Ü¶ f j = f n) I = filter (fun j ‚Ü¶ j = n) I by
      simp only [this, prod_filter, prod_ite_eq', if_pos hnI]
    refine filter_congr (fun j hj ‚Ü¶ ?_)
    refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ by rw [h]‚ü©
    by_contra hij
    have h_dis : Disjoint (f j) (f n) := hf_disj hj hnI hij
    rw [h] at h_dis
    exact hfn (disjoint_self.mp h_dis)

section Accumulate

variable {Œ± : Type*}

theorem MeasurableSet.accumulate {_ : MeasurableSpace Œ±} {s : ‚Ñï ‚Üí Set Œ±}
    (hs : ‚àÄ n, MeasurableSet (s n)) (n : ‚Ñï) : MeasurableSet (Set.Accumulate s n) :=
  MeasurableSet.biUnion (Set.to_countable _) fun n _ ‚Ü¶ hs n

theorem Set.disjoint_accumulate {s : ‚Ñï ‚Üí Set Œ±} (hs : Pairwise (Disjoint on s)) {i j : ‚Ñï}
    (hij : i < j) : Disjoint (Set.Accumulate s i) (s j) := by
  rw [Set.accumulate_def]
  induction i with
  | zero => simp only [Nat.zero_eq, nonpos_iff_eq_zero, iUnion_iUnion_eq_left]; exact hs hij.ne
  | succ i hi =>
    rw [Set.biUnion_le_succ s i]
    exact Disjoint.union_left (hi ((Nat.lt_succ_self i).trans hij)) (hs hij.ne)

theorem Set.accumulate_succ (s : ‚Ñï ‚Üí Set Œ±) (n : ‚Ñï) :
    Set.Accumulate s (n + 1) = Set.Accumulate s n ‚à™ s (n + 1) := Set.biUnion_le_succ s n

@[simp]
lemma accumulate_zero_nat (s : ‚Ñï ‚Üí Set Œ±) : Set.Accumulate s 0 = s 0 := by simp [Set.accumulate_def]

end Accumulate

namespace NNReal

/-- Given x > 0, there is a sequence of positive reals summing to x. -/
theorem exists_seq_pos_summable_eq (x : ‚Ñù‚â•0) (hx : 0 < x) :
    ‚àÉ f : ‚Ñï ‚Üí ‚Ñù‚â•0, (‚àÄ n, 0 < f n) ‚àß Summable f ‚àß ‚àë' n, f n = x := by
  have h : ‚àë' n : ‚Ñï, x / 2 / 2 ^ n = x := by
    rw [NNReal.eq_iff, NNReal.coe_tsum]
    push_cast
    exact tsum_geometric_two' x
  refine ‚ü®fun n : ‚Ñï ‚Ü¶ x / 2 / 2 ^ n, fun n ‚Ü¶ by positivity, ?_, h‚ü©
  by_contra h1
  rw [tsum_eq_zero_of_not_summable h1] at h
  exact hx.ne h

/-- Given x > 0, there is a sequence of positive reals summing to something less than x. -/
theorem exists_seq_pos_summable_lt (x : ‚Ñù‚â•0) (hx : 0 < x) :
    ‚àÉ f : ‚Ñï ‚Üí ‚Ñù‚â•0, (‚àÄ n, 0 < f n) ‚àß Summable f ‚àß ‚àë' n, f n < x := by
  obtain ‚ü®f, hf‚ü© := NNReal.exists_seq_pos_summable_eq (x / 2) (half_pos hx)
  refine ‚ü®f, hf.1, hf.2.1, ?_‚ü©
  rw [hf.2.2]
  exact NNReal.half_lt_self (ne_of_gt hx)

end NNReal

namespace ENNReal

/-- Given some x > 0, there is a sequence of positive reals summing to x. -/
theorem exists_seq_pos_eq (x : ‚Ñù‚â•0‚àû) (hx : 0 < x) :
    ‚àÉ f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû, (‚àÄ n, 0 < f n) ‚àß ‚àë' n, f n = x := by
  by_cases hx_top : x = ‚àû
  ¬∑ use fun _ ‚Ü¶ ‚àû
    simp [forall_const, ENNReal.tsum_top, hx_top, and_self]
  suffices ‚àÉ f : ‚Ñï ‚Üí ‚Ñù‚â•0, (‚àÄ n, 0 < f n) ‚àß Summable f ‚àß ‚àë' n, f n = x.toNNReal by
    obtain ‚ü®f, hf_pos, hf_sum, hf_eq‚ü© := this
    refine ‚ü®fun n ‚Ü¶ f n, ?_, ?_‚ü©
    ¬∑ exact fun n ‚Ü¶ ENNReal.coe_pos.mpr (hf_pos n)
    ¬∑ rw [‚Üê ENNReal.coe_tsum hf_sum, hf_eq, coe_toNNReal hx_top]
  exact NNReal.exists_seq_pos_summable_eq x.toNNReal (toNNReal_pos hx.ne' hx_top)

/-- Given some x > 0, there is a sequence of positive reals summing to something less than x. -/
theorem exists_seq_pos_lt (x : ‚Ñù‚â•0‚àû) (hx : 0 < x) :
    ‚àÉ f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû, (‚àÄ n, 0 < f n) ‚àß ‚àë' n, f n < x := by
  by_cases hx_top : x = ‚àû
  ¬∑ obtain ‚ü®f, hf_pos, hf_eq‚ü© : ‚àÉ f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû, (‚àÄ n, 0 < f n) ‚àß ‚àë' n, f n = 1 :=
      exists_seq_pos_eq 1 zero_lt_one
    refine ‚ü®f, hf_pos, ?_‚ü©
    simp only [hf_eq, hx_top, one_lt_top]
  ¬∑ obtain ‚ü®f, hf‚ü© := ENNReal.exists_seq_pos_eq (x / 2) (ENNReal.half_pos hx.ne')
    refine ‚ü®f, hf.1, ?_‚ü©
    rw [hf.2]
    exact ENNReal.half_lt_self hx.ne' hx_top

theorem tendsto_atTop_zero_const_sub_iff (f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû) (a : ‚Ñù‚â•0‚àû) (ha : a ‚â† ‚àû)
    (hfa : ‚àÄ n, f n ‚â§ a) :
    Tendsto (fun n ‚Ü¶ a - f n) atTop (ùìù 0) ‚Üî Tendsto (fun n ‚Ü¶ f n) atTop (ùìù a) := by
  rw [ENNReal.tendsto_atTop_zero, ENNReal.tendsto_atTop ha]
  refine ‚ü®fun h Œµ hŒµ ‚Ü¶ ?_, fun h Œµ hŒµ ‚Ü¶ ?_‚ü© <;> obtain ‚ü®N, hN‚ü© := h Œµ hŒµ
  ¬∑ refine ‚ü®N, fun n hn ‚Ü¶ ‚ü®?_, (hfa n).trans (le_add_right le_rfl)‚ü©‚ü©
    specialize hN n hn
    rw [tsub_le_iff_right] at hN ‚ä¢
    rwa [add_comm]
  ¬∑ refine ‚ü®N, fun n hn ‚Ü¶ ?_‚ü©
    have hN_left := (hN n hn).1
    rw [tsub_le_iff_right] at hN_left ‚ä¢
    rwa [add_comm]

theorem tendsto_atTop_zero_iff_of_antitone (f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû) (hf : Antitone f) :
    Filter.Tendsto f Filter.atTop (ùìù 0) ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ n : ‚Ñï, f n ‚â§ Œµ := by
  rw [ENNReal.tendsto_atTop_zero]
  refine ‚ü®fun h ‚Ü¶ fun Œµ hŒµ ‚Ü¶ ?_, fun h ‚Ü¶ fun Œµ hŒµ ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®n, hn‚ü© := h Œµ hŒµ
    exact ‚ü®n, hn n le_rfl‚ü©
  ¬∑ obtain ‚ü®n, hn‚ü© := h Œµ hŒµ
    exact ‚ü®n, fun m hm ‚Ü¶ (hf hm).trans hn‚ü©

theorem tendsto_atTop_zero_iff_of_antitone' (f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû) (hf : Antitone f) :
    Filter.Tendsto f Filter.atTop (ùìù 0) ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ n : ‚Ñï, f n < Œµ := by
  rw [ENNReal.tendsto_atTop_zero_iff_of_antitone f hf]
  constructor <;> intro h Œµ hŒµ
  have hŒµ' : (min 1 (Œµ / 2)) > 0 := by
    simp only [ge_iff_le, gt_iff_lt, lt_min_iff, zero_lt_one, div_pos_iff, ne_eq, and_true,
      true_and]
    simp only [two_ne_top, not_false_eq_true, and_true]
    intro g
    exact hŒµ.ne g.symm
  ¬∑ obtain ‚ü®n, hn‚ü© := h (min 1 (Œµ / 2)) hŒµ'
    ¬∑ refine ‚ü®n, hn.trans_lt ?_‚ü©
      by_cases hŒµ_top : Œµ = ‚àû
      ¬∑ rw [hŒµ_top]
        exact (min_le_left _ _).trans_lt ENNReal.one_lt_top
      refine (min_le_right _ _).trans_lt ?_
      rw [ENNReal.div_lt_iff (Or.inr hŒµ.ne') (Or.inr hŒµ_top)]
      conv_lhs => rw [‚Üê mul_one Œµ]
      rw [ENNReal.mul_lt_mul_left hŒµ.ne' hŒµ_top]
      norm_num
  ¬∑ obtain ‚ü®n, hn‚ü© := h Œµ hŒµ
    exact ‚ü®n, hn.le‚ü©

end ENNReal
