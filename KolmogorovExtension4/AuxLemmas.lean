/-
Copyright (c) 2023 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, Peter Pfaffelhuber
-/
import Mathlib.MeasureTheory.OuterMeasure.Basic
import Mathlib.MeasureTheory.MeasurableSpace.Defs
import Mathlib.Analysis.SpecificLimits.Basic

open Finset Set Filter

open scoped ENNReal NNReal Topology

theorem bInter_diff_bUnion_subset {Œπ Œ± : Type*} (A B : Œπ ‚Üí Set Œ±) (s : Set Œπ) :
    ((‚ãÇ i ‚àà s, A i) \ ‚ãÉ i ‚àà s, B i) ‚äÜ ‚ãÇ i ‚àà s, A i \ B i := by
  intro x
  simp only [mem_diff, mem_iInter, mem_iUnion, exists_prop, not_exists, not_and, and_imp]
  intro h1 h2 i hi
  exact ‚ü®h1 i hi, h2 i hi‚ü©

theorem Finset.sum_image_le {Œπ Œ± Œ≤ : Type*} [DecidableEq Œ±] [OrderedSemiring Œ≤] (J : Finset Œπ)
    (g : Œπ ‚Üí Œ±) (f : Œ± ‚Üí Œ≤) (hf : ‚àÄ u ‚àà J.image g, 0 ‚â§ f u) :
    ‚àë u in J.image g, f u ‚â§ ‚àë u in J, f (g u) := by
  rw [sum_comp f g]
  refine sum_le_sum fun a hag ‚Ü¶ ?_
  let hag' := hag
  rw [Finset.mem_image] at hag'
  obtain ‚ü®i, hi, hig‚ü© := hag'
  suffices 1 ‚â§ (J.filter (fun j ‚Ü¶ g j = a)).card by
    conv_lhs => rw [‚Üê one_smul ‚Ñï (f a)]
    simp_rw [nsmul_eq_mul]
    exact mul_le_mul (Nat.mono_cast this) le_rfl (hf a hag) (Nat.cast_nonneg _)
  rw [Nat.succ_le_iff, card_pos]
  refine ‚ü®i, ?_‚ü©
  rw [mem_filter]
  exact ‚ü®hi, hig‚ü©

theorem partialSups_eq_sUnion_image {Œ± : Type*} [DecidableEq (Set Œ±)] (f : ‚Ñï ‚Üí Set Œ±) (n : ‚Ñï) :
    partialSups f n = ‚ãÉ‚ÇÄ ‚Üë(Finset.image f (range (n + 1))) := by
  ext1 s
  simp only [partialSups_eq_biSup, iSup_eq_iUnion, Set.mem_sUnion, mem_iUnion, exists_prop, mem_coe,
  Finset.mem_image, Finset.mem_range, exists_exists_and_eq_and, Nat.lt_succ_iff]

theorem monotone_partialSups {Œ± : Type*} [SemilatticeSup Œ±] (f : ‚Ñï ‚Üí Œ±) :
    Monotone fun n ‚Ü¶ partialSups f n := fun n _ hnm ‚Ü¶
  partialSups_le f n _ fun _ hm'n ‚Ü¶ le_partialSups_of_le _ (hm'n.trans hnm)

/-- todo: this has to be somewhere in mathlib -/
theorem Set.bUnion_le_succ {Œ± : Type*} (s : ‚Ñï ‚Üí Set Œ±) (n : ‚Ñï) :
    (‚ãÉ i ‚â§ n.succ, s i) = (‚ãÉ i ‚â§ n, s i) ‚à™ s n.succ := by
  simp_rw [‚Üê Nat.lt_succ_iff];
  exact Set.biUnion_lt_succ s (n + 1)

theorem Set.bInter_le_succ {Œ± : Type*} (s : ‚Ñï ‚Üí Set Œ±) (n : ‚Ñï) :
    (‚ãÇ i ‚â§ n.succ, s i) = (‚ãÇ i ‚â§ n, s i) ‚à© s n.succ := by
  simp_rw [‚Üê Nat.lt_succ_iff];
  exact Set.biInter_lt_succ s (n + 1)

theorem ENNReal.tendsto_atTop_zero_const_sub_iff (f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû) (a : ‚Ñù‚â•0‚àû) (ha : a ‚â† ‚àû)
    (hfa : ‚àÄ n, f n ‚â§ a) :
    Tendsto (fun n ‚Ü¶ a - f n) atTop (ùìù 0) ‚Üî Tendsto (fun n ‚Ü¶ f n) atTop (ùìù a) := by
  rw [ENNReal.tendsto_atTop_zero, ENNReal.tendsto_atTop ha]
  refine ‚ü®fun h Œµ hŒµ ‚Ü¶ ?_, fun h Œµ hŒµ ‚Ü¶ ?_‚ü© <;> obtain ‚ü®N, hN‚ü© := h Œµ hŒµ
  ¬∑ refine ‚ü®N, fun n hn ‚Ü¶ ‚ü®?_, (hfa n).trans (le_add_right le_rfl)‚ü©‚ü©
    specialize hN n hn
    rw [tsub_le_iff_right] at hN ‚ä¢
    rwa [add_comm]
  ¬∑ refine ‚ü®N, fun n hn ‚Ü¶ ?_‚ü©
    have hN_left := (hN n hn).1
    rw [tsub_le_iff_right] at hN_left ‚ä¢
    rwa [add_comm]

section Accumulate

variable {Œ± : Type*}

theorem MeasurableSet.accumulate {_ : MeasurableSpace Œ±} {s : ‚Ñï ‚Üí Set Œ±}
    (hs : ‚àÄ n, MeasurableSet (s n)) (n : ‚Ñï) : MeasurableSet (Set.Accumulate s n) :=
  MeasurableSet.biUnion (Set.to_countable _) fun n _ ‚Ü¶ hs n

theorem Set.disjoint_accumulate {s : ‚Ñï ‚Üí Set Œ±} (hs : Pairwise (Disjoint on s)) {i j : ‚Ñï}
    (hij : i < j) : Disjoint (Set.Accumulate s i) (s j) := by
  rw [Set.accumulate_def]
  induction' i with i hi
  ¬∑ simp only [Nat.zero_eq, nonpos_iff_eq_zero, iUnion_iUnion_eq_left]
    exact hs hij.ne
  ¬∑ rw [Set.bUnion_le_succ s i]
    exact Disjoint.union_left (hi ((Nat.lt_succ_self i).trans hij)) (hs hij.ne)

theorem Set.accumulate_succ (s : ‚Ñï ‚Üí Set Œ±) (n : ‚Ñï) :
    Set.Accumulate s (n + 1) = Set.Accumulate s n ‚à™ s (n + 1) :=
  Set.bUnion_le_succ s n

end Accumulate

namespace NNReal

theorem isOpen_Ico_zero {b : NNReal} : IsOpen (Set.Ico 0 b) := by
  rw [‚Üê bot_eq_zero, Ico_bot];
  exact isOpen_Iio

/-- Given some x > 0, there is a sequence of positive reals summing to x. -/
theorem exists_seq_pos_summable_eq (x : ‚Ñù‚â•0) (hx : 0 < x) :
    ‚àÉ f : ‚Ñï ‚Üí ‚Ñù‚â•0, (‚àÄ n, 0 < f n) ‚àß Summable f ‚àß ‚àë' n, f n = x := by
  use fun n : ‚Ñï ‚Ü¶ x / 2 / 2 ^ n
  constructor
  ¬∑ intro n
    positivity
  have h : ‚àë' n : ‚Ñï, x / 2 / 2 ^ n = x := by
    rw [NNReal.eq_iff, NNReal.coe_tsum]
    push_cast [(¬∑ ‚àò ¬∑), NNReal.coe_div]
    rw [tsum_geometric_two' (x : ‚Ñù)]
  refine ‚ü®?_, h‚ü©
  by_contra h1
  obtain h2 := tsum_eq_zero_of_not_summable h1
  rw [h] at h2
  apply hx.ne
  rw [h2]

/-- Given some x > 0, there is a sequence of positive reals summing to something less than x.
This is needed in several lemmas in measure theory. -/
theorem exists_seq_pos_summable_lt (x : ‚Ñù‚â•0) (hx : 0 < x) :
    ‚àÉ f : ‚Ñï ‚Üí ‚Ñù‚â•0, (‚àÄ n, 0 < f n) ‚àß Summable f ‚àß ‚àë' n, f n < x := by
  cases' NNReal.exists_seq_pos_summable_eq (x / 2) (half_pos hx) with f hf
  refine ‚ü®f, hf.1, ?_, ?_‚ü©
  ¬∑ rcases hf with ‚ü®_, hf2, _‚ü©
    exact hf2
  ¬∑ rcases hf with ‚ü®_, _, hf3‚ü©
    rw [hf3]
    exact NNReal.half_lt_self (ne_of_gt hx)

end NNReal

namespace ENNReal

/-- Given some x > 0, there is a sequence of positive reals summing to x. -/
theorem exists_seq_pos_eq (x : ‚Ñù‚â•0‚àû) (hx : 0 < x) :
    ‚àÉ f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû, (‚àÄ n, 0 < f n) ‚àß ‚àë' n, f n = x := by
  by_cases hx_top : x = ‚àû
  ¬∑ use fun _ ‚Ü¶ ‚àû
    simp only [forall_const, ENNReal.tsum_top, hx_top, and_self]
    simp
  suffices ‚àÉ f : ‚Ñï ‚Üí ‚Ñù‚â•0, (‚àÄ n, 0 < f n) ‚àß Summable f ‚àß ‚àë' n, f n = x.toNNReal by
    obtain ‚ü®f, hf_pos, hf_sum, hf_eq‚ü© := this
    refine ‚ü®fun n ‚Ü¶ f n, ?_, ?_‚ü©
    ¬∑ exact fun n ‚Ü¶ ENNReal.coe_pos.mpr (hf_pos n)
    ¬∑ simp only
      rw [‚Üê ENNReal.coe_tsum hf_sum, hf_eq, coe_toNNReal hx_top]
  exact NNReal.exists_seq_pos_summable_eq x.toNNReal (toNNReal_pos hx.ne' hx_top)

/-- Given some x > 0, there is a sequence of positive reals summing to something less than x.
This is needed in several lemmas in measure theory. -/
theorem exists_seq_pos_lt (x : ‚Ñù‚â•0‚àû) (hx : 0 < x) :
    ‚àÉ f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû, (‚àÄ n, 0 < f n) ‚àß ‚àë' n, f n < x := by
  by_cases hx_top : x = ‚àû
  ¬∑ obtain ‚ü®f, hf_pos, hf_eq‚ü© : ‚àÉ f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû, (‚àÄ n, 0 < f n) ‚àß ‚àë' n, f n = 1 :=
      exists_seq_pos_eq 1 zero_lt_one
    refine ‚ü®f, hf_pos, ?_‚ü©
    simp only [hf_eq, hx_top, one_lt_top]
  have hx_half : 0 < x / 2 := by simp only [div_pos_iff, ne_eq, hx.ne', not_false_eq_true,
    two_ne_top, and_self]
  obtain ‚ü®f, hf‚ü© := ENNReal.exists_seq_pos_eq (x / 2) hx_half
  refine ‚ü®f, hf.1, ?_‚ü©
  rcases hf with ‚ü®_, hf3‚ü©
  rw [hf3]
  exact ENNReal.half_lt_self hx.ne' hx_top

end ENNReal
