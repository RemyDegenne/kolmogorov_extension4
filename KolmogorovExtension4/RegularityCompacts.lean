/-
Copyright (c) 2023 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, Peter Pfaffelhuber
-/
import KolmogorovExtension4.AuxLemmas
import Mathlib.MeasureTheory.Measure.Regular
import Mathlib.Topology.MetricSpace.Polish

open Set MeasureTheory

open scoped ENNReal Topology

variable {Œ± : Type*}

namespace MeasureTheory

variable [MeasurableSpace Œ±]

/-- Some version of continuity of a measure in the emptyset using a decreasing sequence of sets. -/
theorem tendsto_zero_measure_of_antitone (Œº : Measure Œ±) [IsFiniteMeasure Œº] {s : ‚Ñï ‚Üí Set Œ±}
    (hs1 : ‚àÄ n, MeasurableSet (s n)) (hs2 : Antitone s) (hs3 : (‚ãÇ n, s n) = ‚àÖ) :
    Filter.Tendsto (fun n ‚Ü¶ Œº (s n)) Filter.atTop (ùìù 0) := by
  convert MeasureTheory.tendsto_measure_iInter (fun n ‚Ü¶ (hs1 n).nullMeasurableSet) hs2
    ‚ü®0, measure_ne_top Œº _‚ü©
  simp [hs3]

/-- Some version of continuity of a measure in the emptyset using the intersection along a set of
sets. -/
theorem exists_measure_iInter_lt (Œº : Measure Œ±) [IsFiniteMeasure Œº] (S : ‚Ñï ‚Üí Set Œ±)
    (hS2 : ‚àÄ n, MeasurableSet (S n)) (hS3 : ‚ãÇ n, S n = ‚àÖ) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : 0 < Œµ) :
    ‚àÉ m, Œº (‚ãÇ n ‚â§ m, S n) < Œµ := by
  let s m := (Accumulate (fun n ‚Ü¶ (S n)·∂ú) m)·∂ú
  have hs_anti : Antitone s := by
    intro i j hij
    simp only [compl_le_compl_iff_le, le_eq_subset, s]
    exact monotone_accumulate hij
  have hs_iInter : ‚ãÇ n, s n = ‚àÖ := by
    simp only [s]
    simp_rw [‚Üê hS3, ‚Üê compl_iUnion, iUnion_accumulate, compl_iUnion, compl_compl]
  have hs_meas n : MeasurableSet (s n) := (MeasurableSet.accumulate (fun m ‚Ü¶ (hS2 m).compl) n).compl
  suffices ‚àÉ m, Œº (s m) < Œµ by
    obtain ‚ü®m, hm‚ü© := this
    exact ‚ü®m, by simpa [s, accumulate_def] using hm‚ü©
  suffices Filter.Tendsto (fun m ‚Ü¶ Œº (s m)) Filter.atTop (ùìù 0) by
    rw [ENNReal.tendsto_atTop_zero_iff_of_antitone' _ (fun _ _ h ‚Ü¶ measure_mono (hs_anti h))]
      at this
    exact this Œµ hŒµ
  convert tendsto_measure_iInter (fun n ‚Ü¶ (hs_meas n).nullMeasurableSet) hs_anti
    ‚ü®0, measure_ne_top Œº _‚ü©
  simp [hs_iInter]

end MeasureTheory

section Topology

namespace UniformSpace

lemma _root_.MeasurableSet.ball {_ : MeasurableSpace Œ±} (x : Œ±)
    {s : Set (Œ± √ó Œ±)} (hs : MeasurableSet s) :
    MeasurableSet (UniformSpace.ball x s) := measurable_prod_mk_left hs

/-- Given a family of points `xs n`, a family of entourages `V n` of the diagonal and a family of
natural numbers `u n`, the intersection over `n` of the `V n`-neighborhood of `xs 1, ..., xs (u n)`.
Designed to be relatively compact when `V n` tends to the diagonal. -/
def interUnionBalls (xs : ‚Ñï ‚Üí Œ±) (u : ‚Ñï ‚Üí ‚Ñï) (V : ‚Ñï ‚Üí Set (Œ± √ó Œ±)) : Set Œ± :=
  ‚ãÇ n, ‚ãÉ m ‚â§ u n, UniformSpace.ball (xs m) (Prod.swap ‚Åª¬π' V n)

lemma totallyBounded_interUnionBalls [UniformSpace Œ±] {p : ‚Ñï ‚Üí Prop} {U : ‚Ñï ‚Üí Set (Œ± √ó Œ±)}
    (H : (uniformity Œ±).HasBasis p U) (xs : ‚Ñï ‚Üí Œ±) (u : ‚Ñï ‚Üí ‚Ñï) :
    TotallyBounded (interUnionBalls xs u U) := by
  rw [Filter.HasBasis.totallyBounded_iff H]
  intro i _
  have h_subset : interUnionBalls xs u U
      ‚äÜ ‚ãÉ m ‚â§ u i, UniformSpace.ball (xs m) (Prod.swap ‚Åª¬π' U i) :=
    fun x hx ‚Ü¶ Set.mem_iInter.1 hx i
  classical
  refine ‚ü®Finset.image xs (Finset.range (u i + 1)), Finset.finite_toSet _, fun x hx ‚Ü¶ ?_‚ü©
  simp only [Finset.coe_image, Finset.coe_range, mem_image, mem_Iio, iUnion_exists, biUnion_and',
    iUnion_iUnion_eq_right, Nat.lt_succ_iff]
  exact h_subset hx

/-- The construction `interUnionBalls` is used to have a relatively compact set. -/
theorem isCompact_closure_interUnionBalls [UniformSpace Œ±] {p : ‚Ñï ‚Üí Prop} {U : ‚Ñï ‚Üí Set (Œ± √ó Œ±)}
    (H : (uniformity Œ±).HasBasis p U) [CompleteSpace Œ±] (xs : ‚Ñï ‚Üí Œ±) (u : ‚Ñï ‚Üí ‚Ñï) :
    IsCompact (closure (interUnionBalls xs u U)) := by
  rw [isCompact_iff_totallyBounded_isComplete]
  refine ‚ü®TotallyBounded.closure ?_, isClosed_closure.isComplete‚ü©
  exact totallyBounded_interUnionBalls H xs u

theorem _root_.MeasureTheory.measure_compl_interUnionBalls_le {_ : MeasurableSpace Œ±}
    (Œº : Measure Œ±) (xs : ‚Ñï ‚Üí Œ±) (u : ‚Ñï ‚Üí ‚Ñï) (V : ‚Ñï ‚Üí Set (Œ± √ó Œ±)) :
    Œº (UniformSpace.interUnionBalls xs u V)·∂ú ‚â§
      ‚àë' n, Œº (‚ãÉ m ‚â§ u n, UniformSpace.ball (xs m) (Prod.swap ‚Åª¬π' V n))·∂ú := by
  rw [UniformSpace.interUnionBalls, Set.compl_iInter]
  exact measure_iUnion_le _

end UniformSpace

end Topology

namespace MeasureTheory

variable [MeasurableSpace Œ±] {Œº : Measure Œ±}

theorem innerRegularWRT_isCompact_closure_iff [TopologicalSpace Œ±] [R1Space Œ±] :
    Œº.InnerRegularWRT (IsCompact ‚àò closure) IsClosed ‚Üî Œº.InnerRegularWRT IsCompact IsClosed := by
  constructor <;> intro h A hA r hr
  ¬∑ rcases h hA r hr with ‚ü®K, ‚ü®hK1, hK2, hK3‚ü©‚ü©
    exact ‚ü®closure K, closure_minimal hK1 hA, hK2, hK3.trans_le (measure_mono subset_closure)‚ü©
  ¬∑ rcases h hA r hr with ‚ü®K, ‚ü®hK1, hK2, hK3‚ü©‚ü©
    refine ‚ü®closure K, closure_minimal hK1 hA, ?_, ?_‚ü©
    ¬∑ simpa only [closure_closure, Function.comp_apply] using hK2.closure
    ¬∑ exact hK3.trans_le (measure_mono subset_closure)

lemma innerRegularWRT_isCompact_isClosed_iff_innerRegularWRT_isCompact_closure
    [TopologicalSpace Œ±] [R1Space Œ±] :
    Œº.InnerRegularWRT (fun s ‚Ü¶ IsCompact s ‚àß IsClosed s) IsClosed
      ‚Üî Œº.InnerRegularWRT (IsCompact ‚àò closure) IsClosed := by
  constructor <;> intro h A hA r hr
  ¬∑ obtain ‚ü®K, hK1, ‚ü®hK2, _‚ü©, hK4‚ü© := h hA r hr
    refine ‚ü®K, hK1, ?_, hK4‚ü©
    simp only [closure_closure, Function.comp_apply]
    exact hK2.closure
  ¬∑ obtain ‚ü®K, hK1, hK2, hK3‚ü© := h hA r hr
    refine ‚ü®closure K, closure_minimal hK1 hA, ?_, ?_‚ü©
    ¬∑ simpa only [isClosed_closure, and_true]
    ¬∑ exact hK3.trans_le (measure_mono subset_closure)

lemma innerRegularWRT_isCompact_isClosed_iff [TopologicalSpace Œ±] [R1Space Œ±] :
    Œº.InnerRegularWRT (fun s ‚Ü¶ IsCompact s ‚àß IsClosed s) IsClosed
      ‚Üî Œº.InnerRegularWRT IsCompact IsClosed :=
  innerRegularWRT_isCompact_isClosed_iff_innerRegularWRT_isCompact_closure.trans
    innerRegularWRT_isCompact_closure_iff

theorem innerRegularWRT_of_exists_compl_lt {p q : Set Œ± ‚Üí Prop} (hpq : ‚àÄ A B, p A ‚Üí q B ‚Üí p (A ‚à© B))
    (hŒº : ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ K, p K ‚àß Œº K·∂ú < Œµ) :
    Œº.InnerRegularWRT p q := by
  intro A hA r hr
  obtain ‚ü®K, hK, hK_subset, h_lt‚ü© : ‚àÉ K, p K ‚àß K ‚äÜ A ‚àß Œº (A \ K) < Œº A - r := by
    obtain ‚ü®K', hpK', hK'_lt‚ü© := hŒº (Œº A - r) (tsub_pos_of_lt hr)
    refine ‚ü®K' ‚à© A, hpq K' A hpK' hA, inter_subset_right, ?_‚ü©
    ¬∑ refine (measure_mono fun x ‚Ü¶ ?_).trans_lt hK'_lt
      simp only [diff_inter_self_eq_diff, mem_diff, mem_compl_iff, and_imp, imp_self, imp_true_iff]
  refine ‚ü®K, hK_subset, hK, ?_‚ü©
  have h_lt' : Œº A - Œº K < Œº A - r := le_measure_diff.trans_lt h_lt
  exact lt_of_tsub_lt_tsub_left h_lt'

theorem innerRegularWRT_isCompact_closure_of_univ [TopologicalSpace Œ±]
    (hŒº : ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ K, IsCompact (closure K) ‚àß Œº (K·∂ú) < Œµ) :
    Œº.InnerRegularWRT (IsCompact ‚àò closure) IsClosed := by
  refine innerRegularWRT_of_exists_compl_lt (fun s t hs ht ‚Ü¶ ?_) hŒº
  have : IsCompact (closure s ‚à© t) := hs.inter_right ht
  refine this.of_isClosed_subset isClosed_closure ?_
  refine (closure_inter_subset_inter_closure _ _).trans_eq ?_
  rw [IsClosed.closure_eq ht]

theorem exists_isCompact_closure_measure_lt_of_complete_countable [UniformSpace Œ±] [CompleteSpace Œ±]
    [SecondCountableTopology Œ±] [(uniformity Œ±).IsCountablyGenerated]
    [OpensMeasurableSpace Œ±] (P : Measure Œ±) [IsFiniteMeasure P] (Œµ : ‚Ñù‚â•0‚àû) (hŒµ : 0 < Œµ) :
    ‚àÉ K, IsCompact (closure K) ‚àß P K·∂ú < Œµ := by
  cases isEmpty_or_nonempty Œ±
  case inl =>
    refine ‚ü®‚àÖ, by simp, ?_‚ü©
    rw [‚Üê Set.univ_eq_empty_iff.mpr]
    ¬∑ simpa only [compl_univ, measure_empty, ENNReal.coe_pos] using hŒµ
    ¬∑ assumption
  case inr =>
    let seq := TopologicalSpace.denseSeq Œ±
    have hseq_dense : DenseRange seq := TopologicalSpace.denseRange_denseSeq Œ±
    obtain ‚ü®t : ‚Ñï ‚Üí Set (Œ± √ó Œ±),
        hto : ‚àÄ i, t i ‚àà (uniformity Œ±).sets ‚àß IsOpen (t i) ‚àß SymmetricRel (t i),
        h_basis : (uniformity Œ±).HasAntitoneBasis t‚ü© :=
      (@uniformity_hasBasis_open_symmetric Œ± _).exists_antitone_subbasis
    let f : ‚Ñï ‚Üí ‚Ñï ‚Üí Set Œ± := fun n m ‚Ü¶ UniformSpace.ball (seq m) (t n)
    have h_univ n : (‚ãÉ m, f n m) = univ := hseq_dense.iUnion_uniformity_ball (hto n).1
    have h3 n (Œµ : ‚Ñù‚â•0‚àû) (hŒµ : 0 < Œµ) : ‚àÉ m, P (‚ãÇ m' ‚â§ m, (f n m')·∂ú) < Œµ := by
      refine exists_measure_iInter_lt P _ (fun m ‚Ü¶ ?_) ?_ hŒµ
      ¬∑ exact ((IsOpen.measurableSet (hto n).2.1).ball _).compl
      ¬∑ rw [‚Üê compl_iUnion, h_univ, compl_univ]
    choose! s' s'bound using h3
    rcases ENNReal.exists_seq_pos_lt Œµ hŒµ with ‚ü®Œ¥, hŒ¥1, hŒ¥2‚ü©
    classical
    let u : ‚Ñï ‚Üí ‚Ñï := fun n ‚Ü¶ s' n (Œ¥ n)
    let A := UniformSpace.interUnionBalls seq u t
    refine ‚ü®A, UniformSpace.isCompact_closure_interUnionBalls h_basis.toHasBasis seq u, ?_‚ü©
    refine ((measure_compl_interUnionBalls_le P seq u t).trans ?_).trans_lt hŒ¥2
    refine ENNReal.tsum_le_tsum (fun n ‚Ü¶ ?_)
    have h'' n : Prod.swap ‚Åª¬π' t n = t n := SymmetricRel.eq (hto n).2.2
    simp only [h'', compl_iUnion, ge_iff_le]
    exact (s'bound n (Œ¥ n) (hŒ¥1 n)).le

theorem innerRegularWRT_isCompact_closure_of_complete_countable [UniformSpace Œ±] [CompleteSpace Œ±]
    [SecondCountableTopology Œ±] [(uniformity Œ±).IsCountablyGenerated]
    [OpensMeasurableSpace Œ±] (P : Measure Œ±) [IsFiniteMeasure P] :
    P.InnerRegularWRT (IsCompact ‚àò closure) IsClosed :=
  innerRegularWRT_isCompact_closure_of_univ
    (exists_isCompact_closure_measure_lt_of_complete_countable P)

theorem innerRegularWRT_isCompact_isClosed_of_complete_countable [UniformSpace Œ±] [CompleteSpace Œ±]
    [SecondCountableTopology Œ±] [(uniformity Œ±).IsCountablyGenerated]
    [OpensMeasurableSpace Œ±] (P : Measure Œ±) [IsFiniteMeasure P] :
    P.InnerRegularWRT (fun s ‚Ü¶ IsCompact s ‚àß IsClosed s) IsClosed := by
  rw [innerRegularWRT_isCompact_isClosed_iff_innerRegularWRT_isCompact_closure]
  exact innerRegularWRT_isCompact_closure_of_complete_countable P

theorem innerRegularWRT_isCompact_of_complete_countable [UniformSpace Œ±] [CompleteSpace Œ±]
    [SecondCountableTopology Œ±] [(uniformity Œ±).IsCountablyGenerated]
    [OpensMeasurableSpace Œ±] (P : Measure Œ±) [IsFiniteMeasure P] :
    P.InnerRegularWRT IsCompact IsClosed := by
  rw [‚Üê innerRegularWRT_isCompact_closure_iff]
  exact innerRegularWRT_isCompact_closure_of_complete_countable P

theorem innerRegularWRT_isCompact_isClosed_isOpen_of_complete_countable [PseudoEMetricSpace Œ±]
    [CompleteSpace Œ±] [SecondCountableTopology Œ±] [OpensMeasurableSpace Œ±]
    (P : Measure Œ±) [IsFiniteMeasure P] :
    P.InnerRegularWRT (fun s ‚Ü¶ IsCompact s ‚àß IsClosed s) IsOpen :=
  (innerRegularWRT_isCompact_isClosed_of_complete_countable P).trans
    (Measure.InnerRegularWRT.of_pseudoMetrizableSpace P)

theorem innerRegularWRT_isCompact_isOpen_of_complete_countable [PseudoEMetricSpace Œ±]
    [CompleteSpace Œ±] [SecondCountableTopology Œ±] [OpensMeasurableSpace Œ±]
    (P : Measure Œ±) [IsFiniteMeasure P] :
    P.InnerRegularWRT IsCompact IsOpen :=
  (innerRegularWRT_isCompact_of_complete_countable P).trans
    (Measure.InnerRegularWRT.of_pseudoMetrizableSpace P)

lemma InnerRegularCompactLTTop_of_complete_countable [PseudoEMetricSpace Œ±]
    [CompleteSpace Œ±] [SecondCountableTopology Œ±] [BorelSpace Œ±]
    (P : Measure Œ±) [IsFiniteMeasure P] :
    P.InnerRegularCompactLTTop := by
  refine ‚ü®Measure.InnerRegularWRT.measurableSet_of_isOpen ?_ ?_‚ü©
  ¬∑ exact innerRegularWRT_isCompact_isOpen_of_complete_countable P
  ¬∑ exact fun s t hs_compact ht_open ‚Ü¶ hs_compact.inter_right ht_open.isClosed_compl

theorem innerRegular_isCompact_isClosed_measurableSet_of_complete_countable [PseudoEMetricSpace Œ±]
    [CompleteSpace Œ±] [SecondCountableTopology Œ±] [BorelSpace Œ±]
    (P : Measure Œ±) [IsFiniteMeasure P] :
    P.InnerRegularWRT (fun s ‚Ü¶ IsCompact s ‚àß IsClosed s) MeasurableSet := by
  suffices P.InnerRegularWRT (fun s ‚Ü¶ IsCompact s ‚àß IsClosed s)
      fun s ‚Ü¶ MeasurableSet s ‚àß P s ‚â† ‚àû by
    convert this
    simp only [eq_iff_iff, iff_self_and]
    exact fun _ ‚Ü¶ measure_ne_top P _
  refine Measure.InnerRegularWRT.measurableSet_of_isOpen ?_ ?_
  ¬∑ exact innerRegularWRT_isCompact_isClosed_isOpen_of_complete_countable P
  ¬∑ rintro s t ‚ü®hs_compact, hs_closed‚ü© ht_open
    rw [diff_eq]
    exact ‚ü®hs_compact.inter_right ht_open.isClosed_compl,
      hs_closed.inter (isClosed_compl_iff.mpr ht_open)‚ü©

/-- On a Polish space, any finite measure is regular with respect to compact and closed sets. -/
theorem PolishSpace.innerRegular_isCompact_measurableSet [TopologicalSpace Œ±] [PolishSpace Œ±]
    [BorelSpace Œ±] (Œº : Measure Œ±) [IsFiniteMeasure Œº] :
    Œº.InnerRegularWRT (fun s ‚Ü¶ IsCompact s ‚àß IsClosed s) MeasurableSet := by
  letI := upgradePolishSpace Œ±
  exact innerRegular_isCompact_isClosed_measurableSet_of_complete_countable Œº

end MeasureTheory
