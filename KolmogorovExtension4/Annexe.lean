/-
Copyright (c) 2024 Etienne Marion. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Etienne Marion
-/
import KolmogorovExtension4.DependsOn
import Mathlib.Data.Finset.Basic
import Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic
import Mathlib.MeasureTheory.Integral.Prod
import Mathlib.MeasureTheory.MeasurableSpace.PreorderRestrict
import Mathlib.Probability.Kernel.Composition.CompNotation
import Mathlib.Probability.Kernel.Composition.MeasureCompProd
import Mathlib.Probability.Kernel.Integral
import Mathlib.Probability.Process.Filtration

/-!
New lemmas for mathlib
-/

open MeasureTheory ProbabilityTheory MeasurableSpace ENNReal Finset Function Preorder

section Equiv

variable {Œ± Œ≤ : Type*} (e : Œ± ‚âÉ Œ≤) (s : Finset Œ≤)

/-- Corestriction of an equivalence to a `Finset`. -/
def Equiv.frestrict :
    (s.preimage e e.injective.injOn) ‚âÉ s :=
  { toFun := fun a ‚Ü¶ ‚ü®e a, mem_preimage.1 a.2‚ü©
    invFun := fun b ‚Ü¶ ‚ü®e.symm b, by simp‚ü©
    left_inv := fun _ ‚Ü¶ by simp
    right_inv := fun _ ‚Ü¶ by simp }

@[simp]
lemma Equiv.frestrict_apply (a : s.preimage e e.injective.injOn) : e.frestrict s a = e a := rfl

@[simp]
lemma Equiv.frestrict_symm_apply (b : s) : (e.frestrict s).symm b = e.symm b := rfl

/-- Reindexing and then restricting to a `Finset` is the same as first restricting to the preimage
of this `Finset` and then reindexing. -/
lemma Finset.restrict_comp_piCongrLeft (X : Œ≤ ‚Üí Type*) :
    s.restrict ‚àò ‚áë(e.piCongrLeft X) =
    ‚áë((e.frestrict s).piCongrLeft (fun b : s ‚Ü¶ (X b))) ‚àò
    (s.preimage e e.injective.injOn).restrict := by
  ext x b
  simp only [comp_apply, restrict, Equiv.piCongrLeft_apply_eq_cast, cast_inj]
  rfl

end Equiv

section Lemmas

lemma mem_Iic_bot {Œπ : Type*} [PartialOrder Œπ] [LocallyFiniteOrder Œπ] [OrderBot Œπ] {i : Œπ}
    (hi : i ‚àà Iic ‚ä•) : i = ‚ä• := bot_unique (mem_Iic.1 hi)

@[measurability, fun_prop]
lemma measurable_cast {X Y : Type u} [mX : MeasurableSpace X] [mY : MeasurableSpace Y] (h : X = Y)
    (hm : HEq mX mY) : Measurable (cast h) := by
  subst h
  subst hm
  exact measurable_id

theorem update_updateFinset_eq {X : ‚Ñï ‚Üí Type*} (x z : Œ† n, X n) {m : ‚Ñï} :
    update (updateFinset x (Iic m) (frestrictLe m z)) (m + 1) (z (m + 1)) =
    updateFinset x (Iic (m + 1)) (frestrictLe (m + 1) z) := by
  ext i
  simp only [update, updateFinset, mem_Iic, dite_eq_ite]
  split_ifs with h <;> try omega
  cases h
  all_goals rfl

instance subsingleton_subtype {Œ± : Type*} (a : Œ±) : Subsingleton ({a} : Finset Œ±) where
  allEq x y := by
    rw [‚Üê Subtype.coe_inj, eq_of_mem_singleton x.2, eq_of_mem_singleton y.2]

lemma updateFinset_updateFinset_subset {Œπ : Type*} [DecidableEq Œπ] {Œ± : Œπ ‚Üí Type*}
    {s t : Finset Œπ} (hst : s ‚äÜ t) (x : (i : Œπ) ‚Üí Œ± i) (y : (i : s) ‚Üí Œ± i) (z : (i : t) ‚Üí Œ± i) :
    updateFinset (updateFinset x s y) t z = updateFinset x t z := by
  ext i
  simp only [updateFinset]
  split_ifs with h1 h2 <;> try rfl
  exact (h1 (hst h2)).elim

end Lemmas

section indicator

lemma indicator_one_mul_const {Œ± M : Type*} [MonoidWithZero M] (s : Set Œ±) (c : M) (a : Œ±) :
    (s.indicator (1 : Œ± ‚Üí M) a) * c = s.indicator (fun _ ‚Ü¶ c) a := by
  simp [Set.indicator]

lemma indicator_one_mul_const' {Œ± M : Type*} [MonoidWithZero M] (s : Set Œ±) (c : M) (a : Œ±) :
    (s.indicator (fun _ ‚Ü¶ 1 : Œ± ‚Üí M) a) * c = s.indicator (fun _ ‚Ü¶ c) a := by
  simp [Set.indicator]

theorem preimage_indicator {Œ± Œ≤ M : Type*} [Zero M] (f : Œ± ‚Üí Œ≤) (s : Set Œ≤) (a : Œ±) (g : Œ≤ ‚Üí M) :
    (f ‚Åª¬π' s).indicator (g ‚àò f) a = s.indicator g (f a) := by
  by_cases h : f a ‚àà s <;> simp [h]

theorem preimage_indicator_const {Œ± Œ≤ M : Type*} [Zero M] (f : Œ± ‚Üí Œ≤) (s : Set Œ≤) (a : Œ±) (c : M) :
    (f ‚Åª¬π' s).indicator (fun _ ‚Ü¶ c) a = s.indicator (fun _ ‚Ü¶ c) (f a) := by
  by_cases h : f a ‚àà s <;> simp [h]

theorem indicator_const_eq {Œ± Œ≤ M : Type*} [Zero M] {s : Set Œ±} {t : Set Œ≤} {a : Œ±} {b : Œ≤}
    (c : M) (h : a ‚àà s ‚Üî b ‚àà t) :
    s.indicator (fun _ ‚Ü¶ c) a = t.indicator (fun _ ‚Ü¶ c) b := by
  by_cases h' : a ‚àà s
  ¬∑ simp [h', h.1 h']
  ¬∑ simp [h', h.not.1 h']

theorem indicator_const_eq_iff {Œ± Œ≤ M : Type*} [Zero M] {s : Set Œ±} {t : Set Œ≤} {a : Œ±} {b : Œ≤}
    (c : M) [hc : NeZero c] :
    s.indicator (fun _ ‚Ü¶ c) a = t.indicator (fun _ ‚Ü¶ c) b ‚Üî (a ‚àà s ‚Üî b ‚àà t) := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ by_contra! h'
    rcases h' with (‚ü®h1, h2‚ü© | ‚ü®h1, h2‚ü©)
    ¬∑ rw [Set.indicator_of_mem h1, Set.indicator_of_not_mem h2] at h
      exact hc.out h
    ¬∑ rw [Set.indicator_of_not_mem h1, Set.indicator_of_mem h2] at h
      exact hc.out h.symm
  ¬∑ by_cases h' : a ‚àà s
    ¬∑ simp [h', h.1 h']
    ¬∑ simp [h', h.not.1 h']

theorem Set.indicator_const_smul_apply' {Œ± R M : Type*} [Zero R] [Zero M] [SMulWithZero R M]
    (s : Set Œ±) (r : R) (f : Œ± ‚Üí M) (a : Œ±) :
    s.indicator (r ‚Ä¢ f) a = (s.indicator (fun _ ‚Ü¶ r : Œ± ‚Üí R) a) ‚Ä¢ (f a) := by
  by_cases h : a ‚àà s <;> simp [h]

theorem Set.indicator_one_smul_apply {Œ± M Œ≤ : Type*} [Zero Œ≤] [MonoidWithZero M]
    [MulActionWithZero M Œ≤] (f : Œ± ‚Üí Œ≤) (s : Set Œ±) (a : Œ±) :
    s.indicator f a = (s.indicator (fun _ ‚Ü¶ 1 : Œ± ‚Üí M) a) ‚Ä¢ (f a) := by
  by_cases h : a ‚àà s <;> simp [h]

end indicator

section Measure

variable {X Y Z T U : Type*}
variable [MeasurableSpace Z] [MeasurableSpace T] [MeasurableSpace U]

lemma lintegral_le_mul_ae [MeasurableSpace X] {Œº : Measure X} {f : X ‚Üí ‚Ñù‚â•0‚àû}
    {b : ‚Ñù‚â•0‚àû} (hf : ‚àÄ·µê x ‚àÇŒº, f x ‚â§ b) : ‚à´‚Åª x, f x ‚àÇŒº ‚â§ b * (Œº Set.univ) := by
  rw [‚Üê lintegral_const]
  exact lintegral_mono_ae hf

lemma lintegral_le_mul [MeasurableSpace X] (Œº : Measure X) {f : X ‚Üí ‚Ñù‚â•0‚àû}
    {b : ‚Ñù‚â•0‚àû} (hf : ‚àÄ x, f x ‚â§ b) : ‚à´‚Åª x, f x ‚àÇŒº ‚â§ b * (Œº Set.univ) :=
  lintegral_le_mul_ae (Filter.Eventually.of_forall hf)

lemma lintegral_le_ae [MeasurableSpace X] {Œº : Measure X} [IsProbabilityMeasure Œº]
    {f : X ‚Üí ‚Ñù‚â•0‚àû} {b : ‚Ñù‚â•0‚àû} (hf : ‚àÄ·µê x ‚àÇŒº, f x ‚â§ b) : ‚à´‚Åª x, f x ‚àÇŒº ‚â§ b := by
  simpa using lintegral_le_mul_ae hf

lemma lintegral_le [MeasurableSpace X] (Œº : Measure X) [IsProbabilityMeasure Œº] {f : X ‚Üí ‚Ñù‚â•0‚àû}
    {b : ‚Ñù‚â•0‚àû} (hf : ‚àÄ x, f x ‚â§ b) : ‚à´‚Åª x, f x ‚àÇŒº ‚â§ b := by
  simpa using lintegral_le_mul Œº hf

lemma lintegral_eq_const [MeasurableSpace X] (Œº : Measure X) [IsProbabilityMeasure Œº] {f : X ‚Üí ‚Ñù‚â•0‚àû}
    {c : ‚Ñù‚â•0‚àû} (hf : ‚àÄ x, f x = c) : ‚à´‚Åª x, f x ‚àÇŒº = c := by simp [hf]

section Filtration

/-- If a function `g` is measurable with respect to the pullback along some function `f`, then
to prove `g x = g y` it is enough to prove `f x = f y`. -/
theorem factorsThrough_of_measurable_comap [m : MeasurableSpace Y] [MeasurableSingletonClass Z]
    {f : X ‚Üí Y} {g : X ‚Üí Z} (hg : Measurable[m.comap f] g)  : g.FactorsThrough f := by
  refine fun x‚ÇÅ x‚ÇÇ h ‚Ü¶ Set.eq_of_mem_singleton ?_
  obtain ‚ü®s, -, hs‚ü© := hg (measurableSet_singleton (g x‚ÇÇ))
  rw [‚Üê Set.mem_preimage, ‚Üê hs, Set.mem_preimage, h, ‚Üê Set.mem_preimage, hs]
  rfl

/-- If a function `g` is strongly measurable with respect to the pullback along some function `f`,
then to prove `g x = g y` it is enough to prove `f x = f y`. -/
theorem factorsThrough_of_stronglyMeasurable_comap {Z : Type*} [m : MeasurableSpace Y]
    [TopologicalSpace Z] [TopologicalSpace.PseudoMetrizableSpace Z] [T1Space Z]
    {f : X ‚Üí Y} {g : X ‚Üí Z} (hg : StronglyMeasurable[m.comap f] g) :
    g.FactorsThrough f := by
  borelize Z
  exact factorsThrough_of_measurable_comap hg.measurable

variable {Œπ : Type*} [Preorder Œπ] [LocallyFiniteOrderBot Œπ]
  {X : Œπ ‚Üí Type*} [‚àÄ i, MeasurableSpace (X i)]

/-- The canonical filtration on dependent functions indexed by `‚Ñï`, where `ùìï n` consists of
measurable sets depending only on coordinates `‚â§ n`. -/
def Filtration.piPreorder : @Filtration ((i : Œπ) ‚Üí X i) Œπ _ inferInstance where
  seq n := (inferInstance : MeasurableSpace (Œ† i : Iic n, X i)).comap (frestrictLe n)
  mono' i j hij := by
    simp only
    rw [‚Üê frestrictLe‚ÇÇ_comp_frestrictLe hij, ‚Üê comap_comp]
    exact MeasurableSpace.comap_mono (measurable_frestrictLe‚ÇÇ _).comap_le
  le' n := (measurable_frestrictLe n).comap_le

variable {E : Type*} [NormedAddCommGroup E]

/-- If a function is strongly measurable with respect to the œÉ-algebra generated by the
first coordinates, then it only depends on those first coordinates. -/
theorem dependsOn_of_stronglyMeasurable {i : Œπ} {f : ((i : Œπ) ‚Üí X i) ‚Üí E}
    (mf : StronglyMeasurable[Filtration.piPreorder i] f) : DependsOn f (Set.Iic i) :=
  coe_Iic i ‚ñ∏ dependsOn_iff_factorsThrough.2 (factorsThrough_of_stronglyMeasurable_comap mf)

end Filtration

variable [MeasurableSpace X] [MeasurableSpace Y]
  {Œ∫ : Kernel X Y} {Œ∑ : Kernel Y Z} {x : X} {s : Set Z}

theorem comp_null (x : X) (hs : MeasurableSet s) :
    (Œ∑ ‚àò‚Çñ Œ∫) x s = 0 ‚Üî (fun y ‚Ü¶ Œ∑ y s) =·µê[Œ∫ x] 0 := by
  rw [Kernel.comp_apply' _ _ _ hs, lintegral_eq_zero_iff]
  ¬∑ exact Kernel.measurable_coe _ hs

theorem ae_null_of_comp_null (h : (Œ∑ ‚àò‚Çñ Œ∫) x s = 0) :
    (fun y => Œ∑ y s) =·µê[Œ∫ x] 0 := by
  obtain ‚ü®t, hst, mt, ht‚ü© := exists_measurable_superset_of_null h
  simp_rw [comp_null x mt] at ht
  rw [Filter.eventuallyLE_antisymm_iff]
  exact
    ‚ü®Filter.EventuallyLE.trans_eq
        (Filter.Eventually.of_forall fun x => measure_mono hst) ht,
      Filter.Eventually.of_forall fun x => zero_le _‚ü©

theorem ae_ae_of_ae_comp {p : Z ‚Üí Prop} (h : ‚àÄ·µê z ‚àÇ(Œ∑ ‚àò‚Çñ Œ∫) x, p z) :
    ‚àÄ·µê y ‚àÇŒ∫ x, ‚àÄ·µê z ‚àÇŒ∑ y, p z :=
  ae_null_of_comp_null h

lemma ae_comp_of_ae_ae {Œ∫ : Kernel X Y} {Œ∑ : Kernel Y Z}
    {p : Z ‚Üí Prop} (hp : MeasurableSet {z | p z})
    (h : ‚àÄ·µê y ‚àÇŒ∫ x, ‚àÄ·µê z ‚àÇŒ∑ y, p z) :
    ‚àÄ·µê z ‚àÇ(Œ∑ ‚àò‚Çñ Œ∫) x, p z := by
  simp_rw [ae_iff] at h ‚ä¢
  rw [comp_null]
  ¬∑ exact h
  ¬∑ exact hp.compl

lemma ae_comp_iff {p : Z ‚Üí Prop} (hp : MeasurableSet {z | p z}) :
    (‚àÄ·µê z ‚àÇ(Œ∑ ‚àò‚Çñ Œ∫) x, p z) ‚Üî ‚àÄ·µê y ‚àÇŒ∫ x, ‚àÄ·µê z ‚àÇŒ∑ y, p z :=
  ‚ü®fun h ‚Ü¶ ae_ae_of_ae_comp h, fun h ‚Ü¶ ae_comp_of_ae_ae hp h‚ü©

theorem ProbabilityTheory.Kernel.map_map (Œ∫ : Kernel X Y) {f : Y ‚Üí Z} (hf : Measurable f)
    {g : Z ‚Üí T} (hg : Measurable g) :
    (Œ∫.map f).map g = Œ∫.map (g ‚àò f) := by
  ext1 x
  rw [Kernel.map_apply _ hg, Kernel.map_apply _ hf, Measure.map_map hg hf,
    ‚Üê Kernel.map_apply _ (hg.comp hf)]

theorem ProbabilityTheory.Kernel.id_map {f : X ‚Üí Y} (hf : Measurable f) :
    Kernel.id.map f = Kernel.deterministic f hf := by
  ext1 x
  rw [map_apply _ hf, id_apply, Measure.map_dirac hf, deterministic_apply]

theorem ProbabilityTheory.Kernel.lintegral_id {f : X ‚Üí ‚Ñù‚â•0‚àû} (x : X) (hf : Measurable f) :
    ‚à´‚Åª y, f y ‚àÇ(@Kernel.id X inferInstance x) = f x := by
  rw [id_apply, lintegral_dirac' _ hf]

theorem ProbabilityTheory.Kernel.lintegral_id_prod (Œ∫ : Kernel X Y) [IsSFiniteKernel Œ∫]
    {f : X √ó Y ‚Üí ‚Ñù‚â•0‚àû} (x : X) (hf : Measurable f) :
    ‚à´‚Åª z, f z ‚àÇ((Kernel.id √ó‚Çñ Œ∫) x) = ‚à´‚Åª y, f (x, y) ‚àÇŒ∫ x := by
  rw [lintegral_prod _ _ _ hf, lintegral_id]
  exact hf.lintegral_prod_right'

theorem MeasureTheory.Measure.map_prod (Œº : Measure X)
    (ŒΩ : Measure Y) [SFinite ŒΩ] {f : X ‚Üí Z} (hf : Measurable f)
    {g : Y ‚Üí T} (hg : Measurable g) :
    (Œº.prod ŒΩ).map (Prod.map f g) = (Œº.map f).prod (ŒΩ.map g) := by
  ext s ms
  rw [map_apply, prod_apply, prod_apply, lintegral_map]
  ¬∑ congr with x
    rw [map_apply]
    congr
    ¬∑ exact hg
    ¬∑ exact measurable_prod_mk_left ms
  any_goals fun_prop
  ¬∑ exact measurable_measure_prod_mk_left ms
  ¬∑ exact ms
  ¬∑ exact hf.prod_map hg ms
  ¬∑ exact ms

theorem MeasureTheory.Measure.map_comp_left
    (Œº : Measure X) (Œ∫ : Kernel X Y) (f : Y ‚Üí Z) (mf : Measurable f) :
    (Œ∫ ‚àò‚Çò Œº).map f = Œ∫.map f ‚àò‚Çò Œº := by
  ext s ms
  simp_rw [map_apply mf ms, bind_apply ms (Œ∫.map f).measurable, bind_apply (mf ms) Œ∫.measurable,
    ‚Üê Œ∫.map_apply' mf _ ms]

theorem MeasureTheory.Measure.comp_map_eq_comap_comp
    (Œº : Measure X) (Œ∫ : Kernel Y Z) (f : X ‚Üí Y) (mf : Measurable f) :
    Œ∫ ‚àò‚Çò Œº.map f = Œ∫.comap f mf ‚àò‚Çò Œº := by
  ext s ms
  simp_rw [bind_apply ms Œ∫.measurable, lintegral_map (Œ∫.measurable_coe ms) mf,
    bind_apply ms (Kernel.measurable _), Œ∫.comap_apply]

theorem ProbabilityTheory.Kernel.map_prod (Œ∫ : Kernel X Y) [IsSFiniteKernel Œ∫]
    (Œ∑ : Kernel X T) [IsSFiniteKernel Œ∑]
    {f : Y ‚Üí Z} (hf : Measurable f) {g : T ‚Üí U} (hg : Measurable g) :
    (Œ∫ √ó‚Çñ Œ∑).map (Prod.map f g) = (Œ∫.map f) √ó‚Çñ (Œ∑.map g) := by
  ext1 x
  rw [Kernel.map_apply _ (hf.prod_map hg), Kernel.prod_apply, Measure.map_prod _ _ hf hg,
    Kernel.prod_apply, Kernel.map_apply _ hf, Kernel.map_apply _ hg]

lemma ProbabilityTheory.Kernel.map_prod_eq (Œ∫ : Kernel X Y) [IsSFiniteKernel Œ∫]
    (Œ∑ : Kernel X Z) [IsSFiniteKernel Œ∑]
    {f : Y ‚Üí T} (hf : Measurable f) : (Œ∫.map f) √ó‚Çñ Œ∑ = (Œ∫ √ó‚Çñ Œ∑).map (Prod.map f id) := by
  rw [map_prod _ _ hf measurable_id, map_id]

theorem ProbabilityTheory.Kernel.map_prod_mk_left (Œ∫ : Kernel X Z) [IsSFiniteKernel Œ∫] (y : Y) :
    Œ∫.map (Prod.mk y) = (Kernel.const X (Measure.dirac y)) √ó‚Çñ Œ∫ := by
  ext1 x
  rw [map_apply _ measurable_prod_mk_left, prod_apply, const_apply, Measure.dirac_prod]

theorem ProbabilityTheory.Kernel.map_prod_mk_right (Œ∫ : Kernel X Y) [IsSFiniteKernel Œ∫] (z : Z) :
    Œ∫.map (fun y ‚Ü¶ (y, z)) = Œ∫ √ó‚Çñ (Kernel.const X (Measure.dirac z)) := by
  ext1 x
  rw [map_apply _ measurable_prod_mk_right, prod_apply, const_apply, Measure.prod_dirac]

theorem ProbabilityTheory.Kernel.map_prod_fst (Œ∫ : Kernel X Y) [IsSFiniteKernel Œ∫]
    (Œ∑ : Kernel X Z) [IsMarkovKernel Œ∑] :
    (Œ∫ √ó‚Çñ Œ∑).map Prod.fst = Œ∫ := by
  rw [‚Üê Kernel.fst_eq, Kernel.fst_prod Œ∫ Œ∑]

theorem ProbabilityTheory.Kernel.map_prod_snd (Œ∫ : Kernel X Y) [IsMarkovKernel Œ∫]
    (Œ∑ : Kernel X Z) [IsSFiniteKernel Œ∑] :
    (Œ∫ √ó‚Çñ Œ∑).map Prod.snd = Œ∑ := by
  rw [‚Üê Kernel.snd_eq, Kernel.snd_prod Œ∫ Œ∑]

theorem ProbabilityTheory.Kernel.map_deterministic {f : X ‚Üí Y} (hf : Measurable f)
    {g : Y ‚Üí Z} (hg : Measurable g) :
    (Kernel.deterministic f hf).map g = Kernel.deterministic (g ‚àò f) (hg.comp hf) := by
  ext x s ms
  rw [Kernel.map_apply' _ hg _ ms, Kernel.deterministic_apply' _ _ (hg ms),
    Kernel.deterministic_apply' _ _ ms, preimage_indicator_const]
  rfl

lemma ProbabilityTheory.Kernel.eq_zero_of_isEmpty [IsEmpty Y] (Œ∫ : Kernel X Y) :
    Œ∫ = 0 := by
  ext1 x
  rw [Measure.eq_zero_of_isEmpty (Œ∫ x), zero_apply]

theorem ProbabilityTheory.Kernel.deterministic_prod_apply' {f : X ‚Üí Y} (mf : Measurable f)
    (Œ∑ : Kernel X Z) [IsSFiniteKernel Œ∑] (x : X)
    {s : Set (Y √ó Z)} (ms : MeasurableSet s) :
    ((Kernel.deterministic f mf) √ó‚Çñ Œ∑) x s = Œ∑ x {z | (f x, z) ‚àà s} := by
  rw [Kernel.prod_apply' _ _ _ ms, Kernel.lintegral_deterministic']
  exact measurable_measure_prod_mk_left ms

theorem ProbabilityTheory.Kernel.id_prod_apply' (Œ∑ : Kernel X Y) [IsSFiniteKernel Œ∑] (x : X)
    {s : Set (X √ó Y)} (ms : MeasurableSet s) :
    (Kernel.id √ó‚Çñ Œ∑) x s = Œ∑ x (Prod.mk x ‚Åª¬π' s) := by
  rw [Kernel.id, Kernel.deterministic_prod_apply']
  rfl
  exact ms

lemma ProbabilityTheory.Kernel.fst_comp_id_prod (Œ∫ : Kernel X Y) [IsSFiniteKernel Œ∫]
    (Œ∑ : Kernel (X √ó Y) T) [IsSFiniteKernel Œ∑] :
    ((deterministic Prod.fst measurable_fst) √ó‚Çñ Œ∑) ‚àò‚Çñ (Kernel.id √ó‚Çñ Œ∫) =
    Kernel.id √ó‚Çñ (Œ∑ ‚àò‚Çñ (Kernel.id √ó‚Çñ Œ∫)) := by
  ext x s ms
  rw [comp_apply', lintegral_id_prod, id_prod_apply', comp_apply', lintegral_id_prod]
  ¬∑ congr with y
    rw [prod_apply, deterministic_apply, Measure.dirac_prod, Measure.map_apply]
    ¬∑ exact measurable_prod_mk_left
    ¬∑ exact ms
  ¬∑ exact Œ∑.measurable_coe (measurable_prod_mk_left ms)
  ¬∑ exact measurable_prod_mk_left ms
  ¬∑ exact ms
  ¬∑ exact Kernel.measurable_coe _ ms
  ¬∑ exact ms

lemma MeasurableEquiv.coe_prodAssoc :
    ‚áë(MeasurableEquiv.prodAssoc) = ‚áë(Equiv.prodAssoc X Y Z) := rfl

lemma ProbabilityTheory.Kernel.map_prodAssoc (Œ∫ : Kernel X Y) [IsSFiniteKernel Œ∫]
    (Œ∑ : Kernel X Z) [IsSFiniteKernel Œ∑] (Œæ : Kernel X T) [IsSFiniteKernel Œæ] :
    ((Œ∫ √ó‚Çñ Œæ) √ó‚Çñ Œ∑).map MeasurableEquiv.prodAssoc = Œ∫ √ó‚Çñ (Œæ √ó‚Çñ Œ∑) := by
  ext x s ms
  rw [map_apply', prod_apply', lintegral_prod, prod_apply']
  ¬∑ congr with y
    rw [prod_apply']
    ¬∑ congr
    ¬∑ exact measurable_prod_mk_left ms
  ¬∑ exact ms
  ¬∑ exact measurable_measure_prod_mk_left (ms.preimage (by fun_prop))
  ¬∑ exact ms.preimage (by fun_prop)
  ¬∑ fun_prop
  ¬∑ exact ms

lemma ProbabilityTheory.Kernel.id_prod_id :
    @Kernel.id (X √ó Y) inferInstance =
    (deterministic (@Prod.fst X Y) measurable_fst) √ó‚Çñ
    (deterministic (@Prod.snd X Y) measurable_snd) := by
  rw [deterministic_prod_deterministic]
  rfl

lemma ProbabilityTheory.Kernel.deterministic_congr {f g : X ‚Üí Y} {hf : Measurable f} (h : f = g) :
    deterministic f hf = deterministic g (h ‚ñ∏ hf) := by
  conv_lhs => enter [1]; rw [h]

lemma ProbabilityTheory.Kernel.map_apply_eq_iff_map_symm_apply_eq (Œ∫ : Kernel X Y) {f : Y ‚âÉ·µê Z}
    (Œ∑ : Kernel X Z) :
    Œ∫.map f = Œ∑ ‚Üî Œ∫ = Œ∑.map f.symm := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü© <;> ext1 x
  ¬∑ symm
    rw [map_apply, ‚Üê MeasurableEquiv.map_apply_eq_iff_map_symm_apply_eq, ‚Üê map_apply _ f.measurable,
      h]
    exact f.symm.measurable
  ¬∑ rw [map_apply, MeasurableEquiv.map_apply_eq_iff_map_symm_apply_eq,
      ‚Üê map_apply _ f.symm.measurable, h]
    exact f.measurable

theorem ProbabilityTheory.Kernel.prod_apply_symm' (Œ∫ : Kernel X Y) [IsSFiniteKernel Œ∫]
    (Œ∑ : Kernel X Z) [IsSFiniteKernel Œ∑]
    (x : X) {s : Set (Y √ó Z)} (hs : MeasurableSet s) :
    (Œ∫ √ó‚Çñ Œ∑) x s = ‚à´‚Åª z, Œ∫ x ((fun y ‚Ü¶ (y, z)) ‚Åª¬π' s) ‚àÇŒ∑ x := by
  rw [Kernel.prod_apply, Measure.prod_apply_symm hs]

theorem ProbabilityTheory.Kernel.prod_deterministic_apply' {f : X ‚Üí Z} (mf : Measurable f)
    (Œ∑ : Kernel X Y) [IsSFiniteKernel Œ∑] (x : X)
    {s : Set (Y √ó Z)} (ms : MeasurableSet s) :
    (Œ∑ √ó‚Çñ (Kernel.deterministic f mf)) x s = Œ∑ x {y | (y, f x) ‚àà s} := by
  rw [Kernel.prod_apply_symm' _ _ _ ms, Kernel.lintegral_deterministic']
  ¬∑ rfl
  ¬∑ exact measurable_measure_prod_mk_right ms

theorem ProbabilityTheory.Kernel.comp_apply'' (Œ∫ : Kernel X Y) (Œ∑ : Kernel Y Z) (x : X) :
    (Œ∑ ‚àò‚Çñ Œ∫) x = (Œ∫ x).bind Œ∑ := by
  ext s hs
  rw [Kernel.comp_apply' _ _ _ hs, Measure.bind_apply hs Œ∑.measurable]

theorem MeasureTheory.Measure.map_snd_compProd (Œº : Measure X) [IsProbabilityMeasure Œº]
    (Œ∫ : Kernel X Y) [IsSFiniteKernel Œ∫] {f : Y ‚Üí Z} (hf : Measurable f) :
    (Œº ‚äó‚Çò Œ∫).snd.map f = (Œº ‚äó‚Çò (Œ∫.map f)).snd := by
  ext s ms
  rw [Measure.map_apply hf ms, Measure.snd_apply (hf ms), ‚Üê Set.univ_prod,
    Measure.compProd_apply_prod .univ (hf ms), Measure.snd_apply ms, ‚Üê Set.univ_prod,
    Measure.compProd_apply_prod .univ ms]
  simp_rw [Kernel.map_apply' _ hf _ ms]

/-- from #19639 -/
@[simp]
lemma snd_compProd (Œº : Measure X) [SFinite Œº] (Œ∫ : Kernel X Y) [IsSFiniteKernel Œ∫] :
    (Œº ‚äó‚Çò Œ∫).snd = Measure.bind Œº Œ∫ := by
  ext s hs
  rw [Measure.bind_apply hs Œ∫.measurable, Measure.snd_apply hs, Measure.compProd_apply]
  ¬∑ rfl
  ¬∑ exact measurable_snd hs

lemma snd_compProd_kernel (Œ∫ : Kernel X Y) [IsSFiniteKernel Œ∫] (Œ∑ : Kernel Y Z)
    [IsSFiniteKernel Œ∑] (x : X) :
    ((Œ∫ x) ‚äó‚Çò Œ∑).snd = (Œ∑ ‚àò‚Çñ Œ∫) x := by
  rw [snd_compProd, Kernel.comp_apply'']

theorem ProbabilityTheory.Kernel.comap_const (Œº : Measure Z) {f : X ‚Üí Y} (hf : Measurable f) :
    Kernel.comap (Kernel.const Y Œº) f hf = Kernel.const X Œº := by
  ext1 x
  rw [Kernel.const_apply, Kernel.comap_apply, Kernel.const_apply]

lemma ProbabilityTheory.Kernel.comp_map (Œ∫ : Kernel X Y) (Œ∑ : Kernel Z T) {f : Y ‚Üí Z}
    (hf : Measurable f) :
    Œ∑ ‚àò‚Çñ (Œ∫.map f) = (Œ∑.comap f hf) ‚àò‚Çñ Œ∫ := by
  ext x s ms
  rw [comp_apply' _ _ _ ms, lintegral_map _ hf _ (Œ∑.measurable_coe ms), comp_apply' _ _ _ ms]
  simp_rw [comap_apply']

lemma ProbabilityTheory.Kernel.prod_comap (Œ∫ : Kernel Y Z) [IsSFiniteKernel Œ∫]
    (Œ∑ : Kernel Y T) [IsSFiniteKernel Œ∑] {f : X ‚Üí Y} (hf : Measurable f) :
    (Œ∫ √ó‚Çñ Œ∑).comap f hf = (Œ∫.comap f hf) √ó‚Çñ (Œ∑.comap f hf) := by
  ext1 x
  rw [comap_apply, prod_apply, prod_apply, comap_apply, comap_apply]

lemma ProbabilityTheory.Kernel.id_comap {f : X ‚Üí Y} (hf : Measurable f) :
    Kernel.id.comap f hf = deterministic f hf := by
  ext1 x
  rw [comap_apply, id_apply, deterministic_apply]

lemma ProbabilityTheory.Kernel.id_map_eq_id_comap {f : X ‚Üí Y} (hf : Measurable f) :
    Kernel.id.map f = Kernel.id.comap f hf := by
  rw [id_map hf, id_comap]

lemma ProbabilityTheory.Kernel.const_compProd_const (Œº : Measure Y) [SFinite Œº]
    (ŒΩ : Measure Z) [SFinite ŒΩ] :
    (const X Œº) ‚äó‚Çñ (const (X √ó Y) ŒΩ) = const X (Œº.prod ŒΩ) := by
  ext x s ms
  simp_rw [compProd_apply ms, const_apply, Measure.prod_apply ms]
  rfl

lemma ProbabilityTheory.Kernel.prod_const_comp (Œ∫ : Kernel X Y) [IsSFiniteKernel Œ∫]
    (Œ∑ : Kernel Y Z) [IsSFiniteKernel Œ∑] (Œº : Measure T) [SFinite Œº] :
    (Œ∑ √ó‚Çñ (const Y Œº)) ‚àò‚Çñ Œ∫ = (Œ∑ ‚àò‚Çñ Œ∫) √ó‚Çñ (const X Œº) := by
  ext x s ms
  simp_rw [comp_apply' _ _ _ ms, prod_apply' _ _ _ ms, const_apply]
  rw [lintegral_comp]
  exact measurable_measure_prod_mk_left ms

instance IsZeroOrMarkovKernel.compProd (Œ∫ : Kernel X Y) [IsZeroOrMarkovKernel Œ∫]
    (Œ∑ : Kernel (X √ó Y) Z) [IsZeroOrMarkovKernel Œ∑] : IsZeroOrMarkovKernel (Œ∫ ‚äó‚Çñ Œ∑) := by
  obtain rfl | _ := eq_zero_or_isMarkovKernel Œ∫ <;> obtain rfl | _ := eq_zero_or_isMarkovKernel Œ∑
  all_goals simpa using by infer_instance

instance IsZeroOrMarkovKernel.comp (Œ∫ : Kernel X Y) [IsZeroOrMarkovKernel Œ∫]
    (Œ∑ : Kernel Y Z) [IsZeroOrMarkovKernel Œ∑] : IsZeroOrMarkovKernel (Œ∑ ‚àò‚Çñ Œ∫) := by
  obtain rfl | _ := eq_zero_or_isMarkovKernel Œ∫ <;> obtain rfl | _ := eq_zero_or_isMarkovKernel Œ∑
  all_goals simpa using by infer_instance

variable {E : Type*} [NormedAddCommGroup E]

theorem MeasureTheory.AEStronglyMeasurable.compProd {Œº : Measure X} [SFinite Œº]
    {Œ∫ : Kernel X Y} [IsMarkovKernel Œ∫] {f : X ‚Üí Y ‚Üí E}
    (hf : AEStronglyMeasurable f.uncurry (Œº ‚äó‚Çò Œ∫)) :
    ‚àÄ·µê x ‚àÇŒº, AEStronglyMeasurable (f x) (Œ∫ x) := by
  rw [Measure.compProd] at hf
  apply compProd_mk_left at hf
  simpa using hf

lemma MeasureTheory.AEStronglyMeasurable.comp {f : Z ‚Üí E}
    (hf : AEStronglyMeasurable f ((Œ∑ ‚àò‚Çñ Œ∫) x)) :
    ‚àÄ·µê y ‚àÇŒ∫ x, AEStronglyMeasurable f (Œ∑ y) := by
  filter_upwards [ae_ae_of_ae_comp hf.ae_eq_mk] with x' hx'
  exact hf.stronglyMeasurable_mk.aestronglyMeasurable.congr (ae_eq_symm hx')

theorem MeasureTheory.AEStronglyMeasurable.comp_mk_left [NormedSpace ‚Ñù E]
    [IsSFiniteKernel Œ∑] [IsSFiniteKernel Œ∫] {f : Z ‚Üí E} {x : X}
    (hf : AEStronglyMeasurable f ((Œ∑ ‚àò‚Çñ Œ∫) x)) :
    AEStronglyMeasurable (fun y ‚Ü¶ ‚à´ z, f z ‚àÇŒ∑ y) (Œ∫ x) := by
  rw [‚Üê Kernel.snd_compProd_prodMkLeft, Kernel.snd_apply] at hf
  replace hf := hf.comp_measurable measurable_snd
  exact hf.integral_kernel_compProd

theorem Kernel.integrable_prod_iff (Œ∫ : Kernel X Y) [IsFiniteKernel Œ∫]
    (Œ∑ : Kernel X Z) [IsFiniteKernel Œ∑] (x : X) {f : (Y √ó Z) ‚Üí E}
    (hf : AEStronglyMeasurable f ((Œ∫ √ó‚Çñ Œ∑) x)) : Integrable f ((Œ∫ √ó‚Çñ Œ∑) x) ‚Üî
      (‚àÄ·µê y ‚àÇŒ∫ x, Integrable (fun z ‚Ü¶ f (y, z)) (Œ∑ x)) ‚àß
      Integrable (fun y ‚Ü¶ ‚à´ z, ‚Äñf (y, z)‚Äñ ‚àÇŒ∑ x) (Œ∫ x) := by
  rwa [Kernel.prod_apply, MeasureTheory.integrable_prod_iff] at *

theorem Kernel.integrable_prod_iff' (Œ∫ : Kernel X Y) [IsFiniteKernel Œ∫]
    (Œ∑ : Kernel X Z) [IsFiniteKernel Œ∑] (x : X) {f : (Y √ó Z) ‚Üí E}
    (hf : AEStronglyMeasurable f ((Œ∫ √ó‚Çñ Œ∑) x)) : Integrable f ((Œ∫ √ó‚Çñ Œ∑) x) ‚Üî
      (‚àÄ·µê z ‚àÇŒ∑ x, Integrable (fun y ‚Ü¶ f (y, z)) (Œ∫ x)) ‚àß
      Integrable (fun z ‚Ü¶ ‚à´ y, ‚Äñf (y, z)‚Äñ ‚àÇŒ∫ x) (Œ∑ x) := by
  rwa [Kernel.prod_apply, MeasureTheory.integrable_prod_iff'] at *

theorem integrable_dirac {f : X ‚Üí E} (mf : StronglyMeasurable f) {x : X} :
    Integrable f (Measure.dirac x) := by
    let _ : MeasurableSpace E := borel E
    have _ : BorelSpace E := BorelSpace.mk rfl
    have : f =·µê[Measure.dirac x] (fun _ ‚Ü¶ f x) := ae_eq_dirac' mf.measurable
    rw [integrable_congr this]
    exact integrable_const _

theorem Kernel.integrable_deterministic_prod {f : X ‚Üí Y} (mf : Measurable f)
    (Œ∫ : Kernel X Z) [IsFiniteKernel Œ∫] (x : X)
    {g : (Y √ó Z) ‚Üí E} (mg : StronglyMeasurable g) :
    Integrable g (((Kernel.deterministic f mf) √ó‚Çñ Œ∫) x) ‚Üî
      Integrable (fun z ‚Ü¶ g (f x, z)) (Œ∫ x) := by
  rw [Kernel.integrable_prod_iff]
  ¬∑ constructor
    ¬∑ rintro ‚ü®h, -‚ü©
      rwa [Kernel.deterministic_apply, ae_dirac_iff] at h
      exact measurableSet_integrable mg
    ¬∑ intro h
      constructor
      ¬∑ rwa [Kernel.deterministic_apply, ae_dirac_iff]
        exact measurableSet_integrable mg
      ¬∑ rw [Kernel.deterministic_apply]
        apply integrable_dirac
        exact mg.norm.integral_prod_right'
  ¬∑ exact mg.aestronglyMeasurable

theorem integrable_comp_iff {Œ∑ : Kernel Y Z} [IsSFiniteKernel Œ∑]
    {Œ∫ : Kernel X Y} [IsSFiniteKernel Œ∫] {x : X}
    {f : Z ‚Üí E} (hf : AEStronglyMeasurable f ((Œ∑ ‚àò‚Çñ Œ∫) x)) :
    Integrable f ((Œ∑ ‚àò‚Çñ Œ∫) x) ‚Üî
    (‚àÄ·µê y ‚àÇŒ∫ x, Integrable f (Œ∑ y)) ‚àß (Integrable (fun y ‚Ü¶ ‚à´ z, ‚Äñf z‚Äñ ‚àÇŒ∑ y) (Œ∫ x)) := by
  rw [Kernel.comp_eq_snd_compProd, Kernel.snd_eq, Kernel.map_apply _ measurable_snd] at *
  rw [integrable_map_measure, ProbabilityTheory.integrable_compProd_iff]
  ¬∑ rfl
  ¬∑ exact hf.comp_measurable measurable_snd
  ¬∑ exact hf
  ¬∑ exact measurable_snd.aemeasurable

variable [NormedSpace ‚Ñù E]

theorem MeasureTheory.Integrable.integral_comp {Œ∑ : Kernel Y Z} [IsSFiniteKernel Œ∑] {Œ∫ : Kernel X Y}
    [IsSFiniteKernel Œ∫] {x : X} {f : Z ‚Üí E} (hf : Integrable f ((Œ∑ ‚àò‚Çñ Œ∫) x)) :
    Integrable (fun y ‚Ü¶ ‚à´ z, f z ‚àÇŒ∑ y) (Œ∫ x) :=
  ((integrable_comp_iff hf.1).1 hf).2.mono' hf.1.comp_mk_left <|
    Filter.Eventually.of_forall fun _ ‚Ü¶ norm_integral_le_integral_norm _

theorem Kernel.integral_prod (Œ∫ : Kernel X Y) [IsFiniteKernel Œ∫]
    (Œ∑ : Kernel X Z) [IsFiniteKernel Œ∑] (x : X)
    {f : (Y √ó Z) ‚Üí E} (hf : Integrable f ((Œ∫ √ó‚Çñ Œ∑) x)) :
    ‚à´ p, f p ‚àÇ(Œ∫ √ó‚Çñ Œ∑) x = ‚à´ y, ‚à´ z, f (y, z) ‚àÇŒ∑ x ‚àÇŒ∫ x := by
  rw [Kernel.prod_apply, MeasureTheory.integral_prod]
  rwa [‚Üê Kernel.prod_apply]

theorem Kernel.integral_comp (Œ∑ : Kernel Y Z) [IsFiniteKernel Œ∑]
    (Œ∫ : Kernel X Y) [IsFiniteKernel Œ∫]
    (x : X) {g : Z ‚Üí E} (hg : Integrable g ((Œ∑ ‚àò‚Çñ Œ∫) x)) :
    ‚à´ z, g z ‚àÇ(Œ∑ ‚àò‚Çñ Œ∫) x = ‚à´ y, ‚à´ z, g z ‚àÇŒ∑ y ‚àÇŒ∫ x := by
  rw [Kernel.comp_eq_snd_compProd, Kernel.snd_apply, integral_map,
    ProbabilityTheory.integral_compProd]
  ¬∑ simp_rw [Kernel.prodMkLeft_apply Œ∑]
  ¬∑ apply Integrable.comp_measurable
    ¬∑ convert hg
      rw [Kernel.comp_eq_snd_compProd, Kernel.snd_apply]
    ¬∑ exact measurable_snd
  ¬∑ exact measurable_snd.aemeasurable
  ¬∑ convert hg.aestronglyMeasurable
    rw [Kernel.comp_eq_snd_compProd, Kernel.snd_apply]

theorem setIntegral_eq {Œº : Measure X} (f : X ‚Üí E) {s : Set X} (hs : MeasurableSet s) :
    ‚à´ x in s, f x ‚àÇŒº = ‚à´ x, (s.indicator (fun _ ‚Ü¶ (1 : ‚Ñù)) x) ‚Ä¢ (f x) ‚àÇŒº := by
  simp_rw [‚Üê Set.indicator_one_smul_apply]
  rw [integral_indicator hs]

omit [MeasurableSpace X] in
lemma integral_indicator' (Œº : Measure Y) (f : X ‚Üí Y ‚Üí E) (s : Set X) (x : X) :
    ‚à´ y, s.indicator (f ¬∑ y) x ‚àÇŒº = s.indicator (fun x ‚Ü¶ ‚à´ y, f x y ‚àÇŒº) x := by
  by_cases hx : x ‚àà s <;> simp [hx]

lemma integral_indicator'' (Œ∫ : Kernel X Y) (f : X ‚Üí Y ‚Üí E) (s : Set X) (x : X) :
    ‚à´ y, s.indicator (f ¬∑ y) x ‚àÇŒ∫ x = s.indicator (fun x ‚Ü¶ ‚à´ y, f x y ‚àÇŒ∫ x) x := by
  by_cases hx : x ‚àà s <;> simp [hx]

variable [CompleteSpace E]

theorem Kernel.integral_deterministic_prod {f : X ‚Üí Y} (mf : Measurable f)
    (Œ∫ : Kernel X Z) [IsFiniteKernel Œ∫] (x : X)
    {g : (Y √ó Z) ‚Üí E} (mg : StronglyMeasurable g)
    (i_g : Integrable (fun z ‚Ü¶ g (f x, z)) (Œ∫ x)) :
    ‚à´ p, g p ‚àÇ((Kernel.deterministic f mf) √ó‚Çñ Œ∫) x = ‚à´ z, g (f x, z) ‚àÇŒ∫ x := by
  rw [Kernel.integral_prod, Kernel.integral_deterministic']
  ¬∑ exact mg.integral_prod_right'
  ¬∑ rwa [Kernel.integrable_deterministic_prod _ _ _ mg]

theorem Kernel.lintegral_deterministic_prod {f : X ‚Üí Y} (mf : Measurable f)
    (Œ∫ : Kernel X Z) [IsFiniteKernel Œ∫] (x : X)
    {g : (Y √ó Z) ‚Üí ‚Ñù‚â•0‚àû} (mg : Measurable g) :
    ‚à´‚Åª p, g p ‚àÇ((Kernel.deterministic f mf) √ó‚Çñ Œ∫) x = ‚à´‚Åª z, g (f x, z) ‚àÇŒ∫ x := by
  rw [Kernel.lintegral_prod _ _ _ mg, Kernel.lintegral_deterministic']
  exact mg.lintegral_prod_right'

theorem MeasureTheory.Filtration.condExp_condExp {Œπ : Type*} [Preorder Œπ]
    (f : X ‚Üí E) {Œº : Measure X} (‚Ñ± : @Filtration X Œπ _ inferInstance)
    {i j : Œπ} (hij : i ‚â§ j) [SigmaFinite (Œº.trim (‚Ñ±.le j))] :
    Œº[Œº[f|‚Ñ± j]|‚Ñ± i] =·µê[Œº] Œº[f|‚Ñ± i] := condExp_condExp_of_le (‚Ñ±.mono hij) (‚Ñ±.le j)

end Measure

section Finset

lemma mem_Ioc_succ {n i : ‚Ñï} : i ‚àà Ioc n (n + 1) ‚Üî i = n + 1 := by
  rw [mem_Ioc]
  omega

lemma mem_Ioc_succ' {n : ‚Ñï} (i : Ioc n (n + 1)) : i = ‚ü®n + 1, mem_Ioc_succ.2 rfl‚ü© := by
  simp [‚Üê mem_Ioc_succ.1 i.2]

theorem updateFinset_self {Œπ : Type*} [DecidableEq Œπ] {Œ± : Œπ ‚Üí Type*} (x : (i : Œπ) ‚Üí Œ± i)
    {s : Finset Œπ} (y : (i : s) ‚Üí Œ± i) : (fun i : s ‚Ü¶ updateFinset x s y i) = y := by
  ext i
  simp [updateFinset, i.2]

lemma Finset.sub_Iic (I : Finset ‚Ñï) : I ‚äÜ (Iic (I.sup id)) :=
  fun _ hi ‚Ü¶ mem_Iic.2 <| le_sup (f := id) hi

theorem Set.Iic_diff_Ioc_same {Œ± : Type*} [LinearOrder Œ±]
    {a b : Œ±} (hab : a ‚â§ b) : (Set.Iic b) \ (Set.Ioc a b) = Set.Iic a := by
  ext x
  simp only [mem_diff, mem_Iic, mem_Ioc, not_and, not_le]
  refine ‚ü®fun ‚ü®h1, h2‚ü© ‚Ü¶ ?_, fun h ‚Ü¶ ‚ü®h.trans hab, fun h' ‚Ü¶ (not_le.2 h' h).elim‚ü©‚ü©
  ¬∑ by_contra h3
    exact (not_le.2 (h2 (not_le.1 h3))) h1

theorem Finset.Iic_sdiff_Ioc_same {Œ± : Type*} [LinearOrder Œ±] [OrderBot Œ±] [LocallyFiniteOrder Œ±]
    {a b : Œ±} (hab : a ‚â§ b) : (Iic b) \ (Ioc a b) = Iic a := by
  rw [‚Üê coe_inj, coe_sdiff, coe_Iic, coe_Ioc, coe_Iic, Set.Iic_diff_Ioc_same hab]

theorem Finset.right_mem_Iic {Œ± : Type*} [Preorder Œ±] [LocallyFiniteOrderBot Œ±] (a : Œ±) :
    a ‚àà Iic a := mem_Iic.2 <| le_rfl

theorem Finset.Iic_union_Ioc_eq_Iic {Œ± : Type*} [LinearOrder Œ±] [LocallyFiniteOrder Œ±] [OrderBot Œ±]
    {a b : Œ±} (h : a ‚â§ b) : Iic a ‚à™ Ioc a b = Iic b := by
  rw [‚Üê coe_inj, coe_union, coe_Iic, coe_Iic, coe_Ioc, Set.Iic_union_Ioc_eq_Iic h]

theorem Finset.disjoint_Iic_Ioc {Œ± : Type*} [Preorder Œ±] [LocallyFiniteOrder Œ±] [OrderBot Œ±]
    {a b c : Œ±} (h : a ‚â§ b) : Disjoint (Iic a) (Ioc b c) :=
  disjoint_left.2 fun _ hax hbcx ‚Ü¶ (mem_Iic.1 hax).not_lt <| lt_of_le_of_lt h (mem_Ioc.1 hbcx).1

theorem restrict_updateFinset' {Œπ : Type*} [DecidableEq Œπ] {Œ± : Œπ ‚Üí Type*} {s t : Finset Œπ}
    (hst : s ‚äÜ t) (x : Œ† i, Œ± i) (y : Œ† i : t, Œ± i) :
    s.restrict (updateFinset x t y) = restrict‚ÇÇ hst y := by
  ext i
  simp only [restrict, updateFinset, restrict‚ÇÇ]
  split_ifs with hi
  ¬∑ rfl
  ¬∑ exact (hi (hst i.2)).elim

theorem restrict_updateFinset {Œπ : Type*} [DecidableEq Œπ] {Œ± : Œπ ‚Üí Type*} {s : Finset Œπ}
    (x : Œ† i, Œ± i) (y : Œ† i : s, Œ± i) :
    s.restrict (updateFinset x s y) = y := by
  rw [restrict_updateFinset' subset_rfl]
  rfl

@[simp]
theorem updateFinset_restrict {Œπ : Type*} [DecidableEq Œπ] {Œ± : Œπ ‚Üí Type*} {s : Finset Œπ}
    (x : Œ† i, Œ± i) : updateFinset x s (s.restrict x) = x := by
  ext i
  simp [updateFinset]

open Preorder

theorem frestrictLe_updateFinset' {Œπ : Type*} [DecidableEq Œπ] [Preorder Œπ] [LocallyFiniteOrderBot Œπ]
    {Œ± : Œπ ‚Üí Type*} {i j : Œπ} (hij : i ‚â§ j) (x : Œ† k, Œ± k) (y : Œ† k : Iic j, Œ± k) :
    frestrictLe i (updateFinset x _ y) = frestrictLe‚ÇÇ hij y :=
  restrict_updateFinset' (Iic_subset_Iic.2 hij) ..

theorem frestrictLe_updateFinset {Œπ : Type*} [DecidableEq Œπ] [Preorder Œπ] [LocallyFiniteOrderBot Œπ]
    {Œ± : Œπ ‚Üí Type*} {i : Œπ} (x : Œ† j, Œ± j) (y : Œ† j : Iic i, Œ± j) :
    frestrictLe i (updateFinset x _ y) = y :=
  restrict_updateFinset ..

@[simp]
theorem updateFinset_frestrictLe {Œπ : Type*} [DecidableEq Œπ] [Preorder Œπ] [LocallyFiniteOrderBot Œπ]
    {Œ± : Œπ ‚Üí Type*} {i : Œπ} (x : Œ† i, Œ± i) : updateFinset x _ (frestrictLe i x) = x := by
  simp [frestrictLe]

end Finset

section Product

theorem Finset.prod_congr' {Œ± M : Type*} [CommMonoid M] {s t : Finset Œ±} (hst : s = t)
    (f : t ‚Üí M) : ‚àè i : s, f ‚ü®i.1, hst ‚ñ∏ i.2‚ü© = ‚àè i : t, f i := by cases hst; rfl

theorem Finset.prod_union' {Œ± M : Type*} [DecidableEq Œ±] [CommMonoid M] {s t : Finset Œ±}
    (hst : Disjoint s t) (f : ‚Üë(s ‚à™ t) ‚Üí M) :
    (‚àè i : s, f ‚ü®i.1, subset_union_left i.2‚ü©) * ‚àè i : t, f ‚ü®i.1, subset_union_right i.2‚ü© =
    ‚àè i : ‚Üë(s ‚à™ t), f i := by
  let g : Œ± ‚Üí M := fun a ‚Ü¶ if ha : a ‚àà s ‚à™ t then f ‚ü®a, ha‚ü© else 1
  have h1 : ‚àè i : s, f ‚ü®i.1, subset_union_left i.2‚ü© = ‚àè i : s, g i := by simp [g]
  have h2 : ‚àè i : t, f ‚ü®i.1, subset_union_right i.2‚ü© = ‚àè i : t, g i := by simp [g]
  have h3 : ‚àè i : ‚Üë(s ‚à™ t), f i = ‚àè i : ‚Üë(s ‚à™ t), g i := by simp [g, -mem_union]
  rw [h1, h2, h3, prod_coe_sort, prod_coe_sort, prod_coe_sort, ‚Üê disjUnion_eq_union _ _ hst,
    prod_disjUnion hst]

theorem prod_Ioc {M : Type*} [CommMonoid M] {a b c : ‚Ñï} (hab : a ‚â§ b) (hbc : b ‚â§ c)
    (f : (Ioc a c) ‚Üí M) :
    (‚àè i : Ioc a b, f (Set.inclusion (Ioc_subset_Ioc_right hbc) i)) *
      (‚àè i : Ioc b c, f (Set.inclusion (Ioc_subset_Ioc_left hab) i)) = (‚àè i : Ioc a c, f i) := by
  have : Ioc a b ‚à™ Ioc b c = Ioc a c := by simp [hab, hbc]
  rw [‚Üê prod_congr' this, ‚Üê prod_union']
  rw [‚Üê disjoint_coe, coe_Ioc, coe_Ioc, Set.Ioc_disjoint_Ioc, min_eq_left hbc, max_eq_right hab]

theorem prod_Iic {M : Type*} [CommMonoid M] {a b : ‚Ñï} (hab : a ‚â§ b)
    (f : (Iic b) ‚Üí M) :
    (‚àè i : Iic a, f (Set.inclusion (Iic_subset_Iic.2 hab) i)) *
      (‚àè i : Ioc a b, f (Set.inclusion Ioc_subset_Iic_self i)) = (‚àè i, f i) := by
  have : Iic a ‚à™ Ioc a b = Iic b := by
    rw [‚Üê Finset.coe_inj, coe_union, coe_Iic, coe_Ioc, coe_Iic]
    simp [hab]
  rw [‚Üê prod_congr' this, ‚Üê prod_union']
  rw [‚Üê disjoint_coe, coe_Iic, coe_Ioc]
  exact Set.Iic_disjoint_Ioc le_rfl

end Product
